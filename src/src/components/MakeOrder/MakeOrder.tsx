"use client"

import { useEffect } from "react"
import { useSession } from "next-auth/react"
import { PriceRange, Ticket, Venue } from "@prisma/client"
import Link from "next/link"
import { Button, Flex, Loader, Stack, Stepper, Text, ThemeIcon } from "@mantine/core"
import { IconAlertTriangle, IconCheck } from "@tabler/icons-react"
import FullAreaMessage from "../FullAreaMessage"
import LoginForm from "../LoginForm"
import OrderError from "./OrderError"
import OrderForm from "./OrderForm"
import PaymentForm from "./PaymentForm"
import TicketsPicker from "./TicketsPicker/TicketsPicker"
import TicketsForm from "./TicketsForm"
import { ClientOrder, OrderStage, PaymentData, TicketRow, useOrder } from "./useOrder"
import FullAreaLoading from "../FullAreaLoading"
import { getPaymentData } from "@/lib/api-calls"

export const getStepNumber = (step?: OrderStage) => {
    const stages = ["authenticate", "form", "tickets", "payment", "complete"]
    return stages.findIndex(s => s === step)
}

export default function MakeOrder(
    { venue, rows }:
        {
            venue: (Omit<Venue, "start"> & { start: string, priceRange: PriceRange[] }),
            rows: Record<string, (Ticket & { priceRange: PriceRange | null })[]>
        }
) {
    const initialOrder: ClientOrder = {
        venueId: venue.id,
        noSeats: venue.noSeats,
        isGoodness: false,
        comment: "",
        paymentData: {
            name: "",
            email: "",
            age: "",
            phone: "",
            nickname: "",
            social: ""
        },
        ticketCount: 0,
        tickets: new Map(),
        cheque: undefined
    }

    const { order, setOrder, stage, transition, setStage, nextStage, prevStage, error } = useOrder(initialOrder)

    const { data: session, status } = useSession()

    useEffect(() => {
        if (!setStage || !nextStage)
            return

        if (status === "unauthenticated" && stage !== "authenticate")
            setStage("authenticate")

        if (status === "authenticated" && stage === "authenticate") {
            getPaymentData().then(res => {
                if (res.success) {
                    nextStage(prev => ({ ...prev, paymentData: res.data }))
                }
                else
                    nextStage()
            })
        }
    }, [status, stage, setStage, nextStage])

    // console.log(transition, stage)
    return (
        <Stack sx={{ height: "100%" }}>
            <Stepper active={getStepNumber(stage)} breakpoint="sm" allowNextStepsSelect={false}>
                <Stepper.Step allowStepClick={false} label="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è">
                    –í–≤–µ–¥–∏—Ç–µ email, –Ω–∞ –Ω–µ–≥–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞.
                </Stepper.Step>
                <Stepper.Step allowStepClick={false} label="–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è">
                    {!transition && <>
                        <Text>
                            –ü—Ä–∏ –æ–ø–ª–∞—Ç–µ —Å–æ —Å–≤–æ–µ–π –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –§–ò–û ‚Äî —ç—Ç–æ
                            –Ω—É–∂–Ω–æ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞, –∞ –µ—â—ë –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Ç—ã —Å–º–æ–≥ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—å.
                        </Text>
                        <Text>
                            –¢–∞–∫–∂–µ —É–∫–∞–∑—ã–≤–∞–π —Å–≤–æ–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–µ,
                            —Å –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–ª–∞—Ç–µ–∂.
                        </Text>
                        <Text>
                            –ü–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–ª–µ–¥—É–µ—Ç —É–∫–∞–∑–∞—Ç—å –∏ –∞–¥—Ä–µ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã VK. –û–ø—ã—Ç –ø—Ä–æ—à–ª—ã—Ö —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ–π –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç,
                            —á—Ç–æ —ç—Ç–æ —Å–∞–º—ã–π –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ —Å–æ –∑—Ä–∏—Ç–µ–ª—è–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ üòâ
                        </Text>
                        <Text>
                            –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –Ω–∞ –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞,
                            –§–ò–û –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –ø–æ–ª–µ ¬´–§–ò–û¬ª.
                            –í –ø–æ–ª–µ ¬´–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π¬ª –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω—É–∂–Ω–æ –≤–ø–∏—Å–∞—Ç—å –§–ò–û –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã.
                        </Text>
                        <Text>
                            –ú—ã –ø—Ä–æ—Å–∏–º —É–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ–≥–æ —Ç—Ä–µ–±—É—é—Ç –ø—Ä–∞–≤–∏–ª–∞.
                            –ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ –û–±–ª–∞—Å—Ç–Ω–æ–≥–æ –î–æ–º–∞ –ù–∞—Ä–æ–¥–Ω–æ–≥–æ –¢–≤–æ—Ä—á–µ—Å—Ç–≤–∞,
                            –Ω—É–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–∫–∏ –∑—Ä–∏—Ç–µ–ª–µ–π, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –æ–Ω–∏ –±—É–¥—É—Ç –¥–æ–ø—É—Å–∫–∞—Ç—å—Å—è –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é.
                            –ß—Ç–æ–±—ã –ø–æ—Ö–æ–¥ –Ω–∞ ¬´–ù—è–Ω-—Ñ–µ—Å—Ç¬ª –Ω–µ –±—ã–ª –æ–º—Ä–∞—á—ë–Ω –¥–æ—Å–∞–¥–Ω—ã–º–∏ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—è–º–∏ –∏ –Ω–µ—Ä–∞–∑–±–µ—Ä–∏—Ö–æ–π,
                            –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π –Ω–∞—à–µ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –Ω–µ –∑–∞–±—É–¥—å –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π –æ—Ä–∏–≥–∏–Ω–∞–ª –ø–∞—Å–ø–æ—Ä—Ç–∞
                            –∏–ª–∏ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–∞ –æ —Ä–æ–∂–¥–µ–Ω–∏–∏.
                        </Text>
                    </>}
                </Stepper.Step>
                <Stepper.Step allowStepClick={false} label={venue.noSeats ? "–í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∏–ª–µ—Ç–æ–≤" : "–í—ã–±–æ—Ä –º–µ—Å—Ç"}>
                    {venue.noSeats ? "–í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∏–ª–µ—Ç–æ–≤" : "–í—ã–±–æ—Ä –º–µ—Å—Ç"}
                </Stepper.Step>
                <Stepper.Step allowStepClick={false} label="–û–ø–ª–∞—Ç–∞">
                    –û–ø–ª–∞—Ç–∞
                </Stepper.Step>
                <Stepper.Completed>
                    –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω
                </Stepper.Completed>
            </Stepper>

            <Flex sx={{ flexGrow: 1, marginBottom: 50 }}>
                {transition && <FullAreaLoading />}
                {!transition && stage === "authenticate" && <LoginForm />}
                {!transition && stage === "form" && <OrderForm data={order.paymentData} onSubmit={nextStage} />}
                {!transition && stage === "tickets" && venue.noSeats === false && (
                    <TicketsPicker
                        venue={venue}
                        rows={rows}
                        prevStage={prevStage}
                        nextStage={nextStage}
                    />
                )}
                {!transition && stage === "tickets" && venue.noSeats === true && (
                    <TicketsForm
                        venue={venue}
                        // reservedTicketCount={reservedTicketCount}
                        // order={order}
                        prevStage={prevStage}
                        nextStage={nextStage}
                    />
                )}
                {!transition && stage === "payment" && <PaymentForm venue={venue} order={order} onSubmit={nextStage} />}
                {(!transition && stage === "makeReservation" || !transition && stage === "complete" || !transition && stage === "error") && (
                    <FullAreaMessage>
                        <Stack sx={{ minWidth: 250, maxWidth: 300, alignItems: "center" }}>
                            {!transition && stage === "makeReservation" && <>
                                <Loader size="lg" />
                                <Text>–ë—Ä–æ–Ω–∏—Ä—É–µ–º –±–∏–ª–µ—Ç—ã</Text>
                            </>}
                            {!transition && stage === "complete" && <>
                                <ThemeIcon variant="outline" color="green" size="xl" sx={{ border: 0 }}>
                                    <IconCheck size={40} />
                                </ThemeIcon>
                                <Text>–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</Text>
                                <Link href="/orders" passHref legacyBehavior>
                                    <Button variant="subtle">
                                        –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–∫–∞–∑—ã
                                    </Button>
                                </Link>
                            </>}
                            {!transition && stage === "error" && <>
                                <ThemeIcon variant="outline" color="red" size="xl" sx={{ border: 0 }}>
                                    <IconAlertTriangle size={40} />
                                </ThemeIcon>
                                <Text>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–∏–ª–µ—Ç—ã!</Text>
                                <OrderError text={error} />
                                <Button
                                    variant="subtle"
                                    onClick={() => {
                                        setStage("tickets")
                                        setOrder(prev => ({
                                            ...prev,
                                            tickets: new Map,
                                            error: undefined
                                        }))
                                    }
                                    }
                                >
                                    –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
                                </Button>

                            </>}
                        </Stack>
                    </FullAreaMessage>
                )}
            </Flex>
        </Stack>
    )
}