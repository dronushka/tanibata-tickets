generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  CUSTOMER
  ADMIN
}

model User {
  id            Int        @id @default(autoincrement())
  email         String     @unique
  emailVerified DateTime?
  name          String?
  nickname      String?
  age           Int?
  phone         String?
  social        String?
  createdAt     DateTime   @default(now())
  accounts      Account[]
  sessions      Session[]
  role          Role       @default(CUSTOMER)
  order         Order[]
  passwords     Password[]
}

model Password {
  id         Int      @id @default(autoincrement())
  hash       String   @unique
  created_at DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
}

model Ticket {
  id            Int         @id @default(autoincrement())
  number        String
  reserved      Boolean     @default(false)
  sortNumber    Int         @default(0)
  rowNumber     String?
  sortRowNumber Int?        @default(0)
  order         Order?      @relation(fields: [orderId], references: [id])
  orderId       Int?
  priceRange    PriceRange? @relation(fields: [priceRangeId], references: [id])
  priceRangeId  Int?
  venue         Venue?      @relation(fields: [venueId], references: [id])
  venueId       Int
}

model Venue {
  id               Int             @id @default(autoincrement())
  name             String
  description      String          @default("")
  active           Boolean         @default(false)
  address          String          @default("")
  ticketCount      Int
  availableTickets Int
  start            DateTime        @default(now())
  noSeats          Boolean         @default(false)
  ticketTemplate   TicketTemplate? @relation(fields: [ticketTemplateId], references: [id])
  ticketTemplateId Int?
  priceRange       PriceRange[]
  tickets          Ticket[]
  order            Order[]
}

model TicketTemplate {
  id                    Int     @id @default(autoincrement())
  mailMessage           String? @db.Text
  premiumTicketMessage  String? @db.Text
  ticketTemplate        String?
  premiumTicketTemplate String?
  venue                 Venue[]
}

model PriceRange {
  id      Int      @id @default(autoincrement())
  price   Float    @default(0)
  name    String
  color   String?
  venue   Venue?   @relation(fields: [venueId], references: [id])
  venueId Int?
  tickets Ticket[]
}

enum OrderStatus {
  UNPAID
  PENDING
  RETURN_REQUESTED
  RETURNED
  COMPLETE
  USED
  CANCELLED
}

model Order {
  id          Int          @id @default(autoincrement())
  price       Float
  paymentData Json
  createdAt   DateTime     @default(now())
  isGoodness  Boolean      @default(false)
  comment     String       @default("") @db.VarChar(1000)
  notes       String       @default("") @db.VarChar(1000)
  status      OrderStatus  @default(UNPAID)
  cheque      File?        @relation(fields: [fileId], references: [id])
  fileId      Int?         @unique
  venue       Venue?       @relation(fields: [venueId], references: [id])
  venueId     Int?
  user        User         @relation(fields: [userId], references: [id])
  userId      Int
  ticketCount Int
  sentTickets SentTicket[]
  tickets     Ticket[]
}

model File {
  id    Int    @id @default(autoincrement())
  path  String
  order Order?
}

model SentTicket {
  id      Int      @id @default(autoincrement())
  sentAt  DateTime @default(now())
  order   Order    @relation(fields: [orderId], references: [id])
  orderId Int
}
