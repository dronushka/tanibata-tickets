generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  name      String?
  nickname  String?
  age       Int?
  phone     String?
  social    String?
  createdAt DateTime   @default(now())
  role      Role  @default(CUSTOMER)
  Order     Order[]
  passwords Password[]
}

model Password {
  id         Int      @id @default(autoincrement())
  userId     Int
  hash       String   @unique
  created_at DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  // @@index([userId], map: "Password_userId_fkey")
}

model Ticket {
  id            Int         @id @default(autoincrement())
  number        String
  orderId       Int?
  priceRangeId  Int?
  reserved      Boolean     @default(false)
  sortNumber    Int         @default(0)
  rowNumber     String?
  sortRowNumber Int?        @default(0)
  venueId       Int?
  order         Order?      @relation(fields: [orderId], references: [id])
  priceRange    PriceRange? @relation(fields: [priceRangeId], references: [id])
  Venue         Venue?      @relation(fields: [venueId], references: [id])

  // @@index([orderId], map: "Ticket_orderId_fkey")
  // @@index([priceRangeId], map: "Ticket_priceRangeId_fkey")
  // @@index([venueId], map: "Ticket_venueId_fkey")
}

model Venue {
  id         Int          @id @default(autoincrement())
  name       String
  active     Boolean      @default(false)
  address    String       @default("")
  noPlaces   Boolean      @default(false)
  start      DateTime     @default(now())
  PriceRange PriceRange[]
  Ticket     Ticket[]
}

model PriceRange {
  id      Int      @id @default(autoincrement())
  price   Float    @default(0)
  name    String
  venueId Int?
  Venue   Venue?   @relation(fields: [venueId], references: [id])
  Ticket  Ticket[]

  // @@index([venueId], map: "PriceRange_venueId_fkey")
}

model Order {
  id          Int          @id @default(autoincrement())
  price       Float
  userId      Int
  paymentData Json
  createdAt   DateTime     @default(now())
  status      OrderStatus  @default(UNPAID)
  fileId      Int?         @unique
  cheque      File?        @relation(fields: [fileId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  sentTickets SentTicket[]
  tickets     Ticket[]

  // @@index([userId], map: "Order_userId_fkey")
}

model File {
  id    Int    @id @default(autoincrement())
  path  String
  order Order?
}

model SentTicket {
  id      Int      @id @default(autoincrement())
  sentAt  DateTime @default(now())
  orderId Int
  order   Order    @relation(fields: [orderId], references: [id])

  // @@index([orderId], map: "SentTicket_orderId_fkey")
}

enum OrderStatus {
  UNPAID
  PENDING
  RETURN_REQUESTED
  RETURNED
  COMPLETE
  USED
  CANCELLED
}

enum Role {
  CUSTOMER
  ADMIN
}
